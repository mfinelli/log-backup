#!/bin/bash

# logbackup: backup rotated logfiles to s3.
# Copyright (C) 2016 Mario Finelli
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Get local configuration
source ~/.logbackup

if [[ -z ${PASSPHRASE+x} ]]; then
    echo >&2 "You must configure an encryption password!"
    exit 1
fi

if [[ ${#LOGPATHS[@]} -lt 1 ]]; then
    echo >&2 "You must specify at least one path/pattern to backup!"
    exit 1
fi

if [[ ${#LOGPATHS[@]} -ne ${#PREFIX[@]} ]]; then
    echo >&2 "You don't have prefixes to match paths!"
    exit 1
fi

if [[ -z "$BUCKET" ]]; then
    echo >&2 "You must specify an s3 bucket for uploading!"
    exit 1
fi

command -v s3cmd >/dev/null 2>&1 || { \
    echo >&2 "S3cmd is not installed. Aborting!"; exit 1; \
}

# Make sure that s3cmd has been configured
if [ ! -f ~/.s3cfg ]; then
    echo >&2 "S3cmd has not been configured yet. Aborting!"
    exit 2
fi

for i in "${!LOGPATHS[@]}"; do
    logpath="${LOGPATHS[$i]}"

    WORKDIR=$(mktemp -d) || { \
        echo >&2 "Could not create temporary directory."; exit 1; \
    }

    cd "$WORKDIR"
    for logfile in `ls $logpath`; do
        bucket_with_prefix=s3://"$BUCKET"/"${PREFIX[$i]}"/
        logs_in_bucket=`s3cmd ls "$bucket_with_prefix"`

        supposed_file="$(basename "$logfile").gpg"
        echo "$logs_in_bucket" | grep "$supposed_file" > /dev/null

        if [ $? -ne 0 ]; then
            echo "Need to create and upload $supposed_file"

            gpg --cipher-algo AES256 --symmetric --yes --batch \
                --passphrase="$PASSPHRASE" \
                --output "$WORKDIR/$(basename "$logfile").gpg" \
                "$logfile"

            s3cmd put \
                --acl-private \
                --guess-mime-type \
                --server-side-encryption \
                "$supposed_file" \
                "${bucket_with_prefix}${supposed_file}"

            rm "$supposed_file"
        else
            echo "$supposed_file has already been uploaded to s3."
        fi
    done

    cd ../
    rmdir "$(basename "$WORKDIR")"
done
